{"ast":null,"code":"import { setTimerId, getTimerId, getDateAttribute } from './utils/dom';\nimport { formatDiff, diffSec, nextInterval } from './utils/date';\nimport { getLocale } from './register'; // all realtime timer\n\nvar TIMER_POOL = {};\n/**\r\n * clear a timer from pool\r\n * @param tid\r\n */\n\nvar clear = function (tid) {\n  clearTimeout(tid);\n  delete TIMER_POOL[tid];\n}; // run with timer(setTimeout)\n\n\nfunction run(node, date, localeFunc, opts) {\n  // clear the node's exist timer\n  clear(getTimerId(node));\n  var relativeDate = opts.relativeDate,\n      minInterval = opts.minInterval; // get diff seconds\n\n  var diff = diffSec(date, relativeDate); // render\n\n  node.innerText = formatDiff(diff, localeFunc);\n  var tid = setTimeout(function () {\n    run(node, date, localeFunc, opts);\n  }, Math.min(Math.max(nextInterval(diff), minInterval || 1) * 1000, 0x7fffffff)); // there is no need to save node in object. Just save the key\n\n  TIMER_POOL[tid] = 0;\n  setTimerId(node, tid);\n}\n/**\r\n * cancel a timer or all timers\r\n * @param node - node hosting the time string\r\n */\n\n\nexport function cancel(node) {\n  // cancel one\n  if (node) clear(getTimerId(node)); // cancel all\n  // @ts-ignore\n  else Object.keys(TIMER_POOL).forEach(clear);\n}\n/**\r\n * render a dom realtime\r\n * @param nodes\r\n * @param locale\r\n * @param opts\r\n */\n\nexport function render(nodes, locale, opts) {\n  // by .length\n  // @ts-ignore\n  var nodeList = nodes.length ? nodes : [nodes];\n  nodeList.forEach(function (node) {\n    run(node, getDateAttribute(node), getLocale(locale), opts || {});\n  });\n  return nodeList;\n}","map":{"version":3,"sources":["../src/realtime.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,UAArB,EAAiC,gBAAjC,QAAyD,aAAzD;AACA,SAAS,UAAT,EAAqB,OAArB,EAA8B,YAA9B,QAAkD,cAAlD;AACA,SAAS,SAAT,QAA0B,YAA1B,C,CAGA;;AACA,IAAM,UAAU,GAAc,EAA9B;AAEA;;;AAGG;;AACH,IAAM,KAAK,GAAG,UAAC,GAAD,EAAY;AACxB,EAAA,YAAY,CAAC,GAAD,CAAZ;AACA,SAAO,UAAU,CAAC,GAAD,CAAjB;AACD,CAHD,C,CAKA;;;AACA,SAAS,GAAT,CAAa,IAAb,EAAgC,IAAhC,EAA8C,UAA9C,EAAsE,IAAtE,EAAgF;AAC9E;AACA,EAAA,KAAK,CAAC,UAAU,CAAC,IAAD,CAAX,CAAL;AAEQ,MAAA,YAAA,GAAA,IAAA,CAAA,YAAA;AAAA,MAAc,WAAA,GAAA,IAAA,CAAA,WAAd,CAJsE,CAM9E;;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,IAAD,EAAO,YAAP,CAApB,CAP8E,CAQ9E;;AACA,EAAA,IAAI,CAAC,SAAL,GAAiB,UAAU,CAAC,IAAD,EAAO,UAAP,CAA3B;AAEA,MAAM,GAAG,GAAI,UAAU,CAAC,YAAA;AACtB,IAAA,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,UAAb,EAAyB,IAAzB,CAAH;AACD,GAFsB,EAEpB,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,YAAY,CAAC,IAAD,CAArB,EAA6B,WAAW,IAAI,CAA5C,IAAiD,IAA1D,EAAgE,UAAhE,CAFoB,CAAvB,CAX8E,CAe9E;;AACA,EAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,CAAlB;AACA,EAAA,UAAU,CAAC,IAAD,EAAO,GAAP,CAAV;AACD;AAED;;;AAGG;;;AACH,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAAmC;AACvC;AACA,MAAI,IAAJ,EAAU,KAAK,CAAC,UAAU,CAAC,IAAD,CAAX,CAAL,CAAV,CACA;AACA;AAFA,OAGK,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,KAAhC;AACN;AAED;;;;;AAKG;;AACH,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAAgE,MAAhE,EAAiF,IAAjF,EAA4F;AAChG;AACA;AACA,MAAM,QAAQ,GAAkB,KAAK,CAAC,MAAN,GAAe,KAAf,GAAuB,CAAC,KAAD,CAAvD;AAEA,EAAA,QAAQ,CAAC,OAAT,CAAiB,UAAC,IAAD,EAAkB;AACjC,IAAA,GAAG,CAAC,IAAD,EAAO,gBAAgB,CAAC,IAAD,CAAvB,EAA+B,SAAS,CAAC,MAAD,CAAxC,EAAkD,IAAI,IAAI,EAA1D,CAAH;AACD,GAFD;AAIA,SAAO,QAAP;AACD","sourceRoot":"","sourcesContent":["import { setTimerId, getTimerId, getDateAttribute } from './utils/dom';\r\nimport { formatDiff, diffSec, nextInterval } from './utils/date';\r\nimport { getLocale } from './register';\r\n// all realtime timer\r\nvar TIMER_POOL = {};\r\n/**\r\n * clear a timer from pool\r\n * @param tid\r\n */\r\nvar clear = function (tid) {\r\n    clearTimeout(tid);\r\n    delete TIMER_POOL[tid];\r\n};\r\n// run with timer(setTimeout)\r\nfunction run(node, date, localeFunc, opts) {\r\n    // clear the node's exist timer\r\n    clear(getTimerId(node));\r\n    var relativeDate = opts.relativeDate, minInterval = opts.minInterval;\r\n    // get diff seconds\r\n    var diff = diffSec(date, relativeDate);\r\n    // render\r\n    node.innerText = formatDiff(diff, localeFunc);\r\n    var tid = setTimeout(function () {\r\n        run(node, date, localeFunc, opts);\r\n    }, Math.min(Math.max(nextInterval(diff), minInterval || 1) * 1000, 0x7fffffff));\r\n    // there is no need to save node in object. Just save the key\r\n    TIMER_POOL[tid] = 0;\r\n    setTimerId(node, tid);\r\n}\r\n/**\r\n * cancel a timer or all timers\r\n * @param node - node hosting the time string\r\n */\r\nexport function cancel(node) {\r\n    // cancel one\r\n    if (node)\r\n        clear(getTimerId(node));\r\n    // cancel all\r\n    // @ts-ignore\r\n    else\r\n        Object.keys(TIMER_POOL).forEach(clear);\r\n}\r\n/**\r\n * render a dom realtime\r\n * @param nodes\r\n * @param locale\r\n * @param opts\r\n */\r\nexport function render(nodes, locale, opts) {\r\n    // by .length\r\n    // @ts-ignore\r\n    var nodeList = nodes.length ? nodes : [nodes];\r\n    nodeList.forEach(function (node) {\r\n        run(node, getDateAttribute(node), getLocale(locale), opts || {});\r\n    });\r\n    return nodeList;\r\n}\r\n//# sourceMappingURL=realtime.js.map"]},"metadata":{},"sourceType":"module"}